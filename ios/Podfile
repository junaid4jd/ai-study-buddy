# Uncomment this line to define a global platform for your project
platform :ios, '13.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Speed up builds
ENV['COCOAPODS_PARALLEL_CODE_SIGN'] = 'true'
ENV['COCOAPODS_DISABLE_DETERMINISTIC_UUIDS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    # Performance and stability optimizations
    target.build_configurations.each do |config|
      # Basic settings
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      
      # Swift optimizations
      config.build_settings['SWIFT_COMPILATION_MODE'] = 'wholemodule'
      config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-O'
      config.build_settings['SWIFT_ACTIVE_COMPILATION_CONDITIONS'] = 'RELEASE'
      
      # Memory and performance optimizations
      config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '3'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['MTL_ENABLE_DEBUG_INFO'] = 'NO'
      config.build_settings['VALIDATE_PRODUCT'] = 'YES'
      
      # Reduce binary size
      config.build_settings['DEAD_CODE_STRIPPING'] = 'YES'
      config.build_settings['STRIP_INSTALLED_PRODUCT'] = 'YES'
      config.build_settings['SEPARATE_STRIP'] = 'YES'
      config.build_settings['COPY_PHASE_STRIP'] = 'YES'
      
      # Faster linking
      config.build_settings['LD_RUNPATH_SEARCH_PATHS'] = [
        '$(inherited)',
        '@executable_path/Frameworks',
        '@loader_path/Frameworks'
      ]
      
      # Prevent crashes
      config.build_settings['CLANG_ENABLE_OBJC_WEAK'] = 'YES'
      config.build_settings['CLANG_WARN_OBJC_ROOT_CLASS'] = 'YES_ERROR'
      config.build_settings['GCC_WARN_UNDECLARED_SELECTOR'] = 'YES'
      config.build_settings['CLANG_WARN_EMPTY_BODY'] = 'YES'
      config.build_settings['GCC_WARN_UNINITIALIZED_AUTOS'] = 'YES_AGGRESSIVE'
      
      # Firebase specific optimizations
      if target.name.include?('Firebase')
        config.build_settings['OTHER_LDFLAGS'] = '$(inherited) -ObjC'
        config.build_settings['FRAMEWORK_SEARCH_PATHS'] = '$(inherited) $(PROJECT_DIR)'
      end
      
      # Memory management for large dependencies
      if ['gRPC', 'FirebaseFirestore', 'leveldb'].any? { |name| target.name.include?(name) }
        config.build_settings['GCC_OPTIMIZATION_LEVEL'] = 's'  # Optimize for size
        config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Osize'
      end
    end
  end
  
  # Additional project-level optimizations
  installer.pods_project.build_configurations.each do |config|
    config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
    config.build_settings['ENABLE_STRICT_OBJC_MSGSEND'] = 'YES'
  end
end
